{"Other%20Typealiases.html#/s:12LaunchDarkly22RequestHeaderTransforma":{"name":"RequestHeaderTransform","abstract":"<p>A callback for dynamically setting http headers when connection &amp; reconnecting to a stream"},"changelog.html":{"name":"CHANGELOG"},"contributing.html":{"name":"CONTRIBUTING"},"licensetxt.html":{"name":"LICENSE.txt"},"Classes/ObjcLDDictionaryChangedFlag.html#/c:@M@LaunchDarkly@objc(cs)LDDictionaryChangedFlag(py)oldValue":{"name":"oldValue","abstract":"<p>The changed flag&rsquo;s value before it changed</p>","parent_name":"ObjcLDDictionaryChangedFlag"},"Classes/ObjcLDDictionaryChangedFlag.html#/c:@M@LaunchDarkly@objc(cs)LDDictionaryChangedFlag(py)newValue":{"name":"newValue","abstract":"<p>The changed flag&rsquo;s value after it changed</p>","parent_name":"ObjcLDDictionaryChangedFlag"},"Classes/ObjcLDDictionaryChangedFlag.html#/c:@M@LaunchDarkly@objc(cs)LDDictionaryChangedFlag(py)typeMismatch":{"name":"typeMismatch","abstract":"<p>Undocumented</p>","parent_name":"ObjcLDDictionaryChangedFlag"},"Classes/ObjcLDArrayChangedFlag.html#/c:@M@LaunchDarkly@objc(cs)LDArrayChangedFlag(py)oldValue":{"name":"oldValue","abstract":"<p>The changed flag&rsquo;s value before it changed</p>","parent_name":"ObjcLDArrayChangedFlag"},"Classes/ObjcLDArrayChangedFlag.html#/c:@M@LaunchDarkly@objc(cs)LDArrayChangedFlag(py)newValue":{"name":"newValue","abstract":"<p>The changed flag&rsquo;s value after it changed</p>","parent_name":"ObjcLDArrayChangedFlag"},"Classes/ObjcLDArrayChangedFlag.html#/c:@M@LaunchDarkly@objc(cs)LDArrayChangedFlag(py)typeMismatch":{"name":"typeMismatch","abstract":"<p>Undocumented</p>","parent_name":"ObjcLDArrayChangedFlag"},"Classes/ObjcLDStringChangedFlag.html#/c:@M@LaunchDarkly@objc(cs)LDStringChangedFlag(py)oldValue":{"name":"oldValue","abstract":"<p>The changed flag&rsquo;s value before it changed</p>","parent_name":"ObjcLDStringChangedFlag"},"Classes/ObjcLDStringChangedFlag.html#/c:@M@LaunchDarkly@objc(cs)LDStringChangedFlag(py)newValue":{"name":"newValue","abstract":"<p>The changed flag&rsquo;s value after it changed</p>","parent_name":"ObjcLDStringChangedFlag"},"Classes/ObjcLDStringChangedFlag.html#/c:@M@LaunchDarkly@objc(cs)LDStringChangedFlag(py)typeMismatch":{"name":"typeMismatch","abstract":"<p>Undocumented</p>","parent_name":"ObjcLDStringChangedFlag"},"Classes/ObjcLDDoubleChangedFlag.html#/c:@M@LaunchDarkly@objc(cs)LDDoubleChangedFlag(py)oldValue":{"name":"oldValue","abstract":"<p>The changed flag&rsquo;s value before it changed</p>","parent_name":"ObjcLDDoubleChangedFlag"},"Classes/ObjcLDDoubleChangedFlag.html#/c:@M@LaunchDarkly@objc(cs)LDDoubleChangedFlag(py)newValue":{"name":"newValue","abstract":"<p>The changed flag&rsquo;s value after it changed</p>","parent_name":"ObjcLDDoubleChangedFlag"},"Classes/ObjcLDDoubleChangedFlag.html#/c:@M@LaunchDarkly@objc(cs)LDDoubleChangedFlag(py)typeMismatch":{"name":"typeMismatch","abstract":"<p>Undocumented</p>","parent_name":"ObjcLDDoubleChangedFlag"},"Classes/ObjcLDIntegerChangedFlag.html#/c:@M@LaunchDarkly@objc(cs)LDIntegerChangedFlag(py)oldValue":{"name":"oldValue","abstract":"<p>The changed flag&rsquo;s value before it changed</p>","parent_name":"ObjcLDIntegerChangedFlag"},"Classes/ObjcLDIntegerChangedFlag.html#/c:@M@LaunchDarkly@objc(cs)LDIntegerChangedFlag(py)newValue":{"name":"newValue","abstract":"<p>The changed flag&rsquo;s value after it changed</p>","parent_name":"ObjcLDIntegerChangedFlag"},"Classes/ObjcLDIntegerChangedFlag.html#/c:@M@LaunchDarkly@objc(cs)LDIntegerChangedFlag(py)typeMismatch":{"name":"typeMismatch","abstract":"<p>Undocumented</p>","parent_name":"ObjcLDIntegerChangedFlag"},"Classes/ObjcLDBoolChangedFlag.html#/c:@M@LaunchDarkly@objc(cs)LDBoolChangedFlag(py)oldValue":{"name":"oldValue","abstract":"<p>The changed flag&rsquo;s value before it changed</p>","parent_name":"ObjcLDBoolChangedFlag"},"Classes/ObjcLDBoolChangedFlag.html#/c:@M@LaunchDarkly@objc(cs)LDBoolChangedFlag(py)newValue":{"name":"newValue","abstract":"<p>The changed flag&rsquo;s value after it changed</p>","parent_name":"ObjcLDBoolChangedFlag"},"Classes/ObjcLDBoolChangedFlag.html#/c:@M@LaunchDarkly@objc(cs)LDBoolChangedFlag(py)typeMismatch":{"name":"typeMismatch","abstract":"<p>Undocumented</p>","parent_name":"ObjcLDBoolChangedFlag"},"Classes/ObjcLDBoolChangedFlag.html":{"name":"ObjcLDBoolChangedFlag","abstract":"<p>Wraps the changed feature flag&rsquo;s BOOL values.</p>"},"Classes/ObjcLDIntegerChangedFlag.html":{"name":"ObjcLDIntegerChangedFlag","abstract":"<p>Wraps the changed feature flag&rsquo;s NSInteger values.</p>"},"Classes/ObjcLDDoubleChangedFlag.html":{"name":"ObjcLDDoubleChangedFlag","abstract":"<p>Wraps the changed feature flag&rsquo;s double values.</p>"},"Classes/ObjcLDStringChangedFlag.html":{"name":"ObjcLDStringChangedFlag","abstract":"<p>Wraps the changed feature flag&rsquo;s NSString values.</p>"},"Classes/ObjcLDArrayChangedFlag.html":{"name":"ObjcLDArrayChangedFlag","abstract":"<p>Wraps the changed feature flag&rsquo;s NSArray values.</p>"},"Classes/ObjcLDDictionaryChangedFlag.html":{"name":"ObjcLDDictionaryChangedFlag","abstract":"<p>Wraps the changed feature flag&rsquo;s NSDictionary values.</p>"},"Classes/ObjcLDDictionaryEvaluationDetail.html#/c:@M@LaunchDarkly@objc(cs)DictionaryEvaluationDetail(py)value":{"name":"value","abstract":"<p>Undocumented</p>","parent_name":"ObjcLDDictionaryEvaluationDetail"},"Classes/ObjcLDDictionaryEvaluationDetail.html#/c:@M@LaunchDarkly@objc(cs)DictionaryEvaluationDetail(py)variationIndex":{"name":"variationIndex","abstract":"<p>Undocumented</p>","parent_name":"ObjcLDDictionaryEvaluationDetail"},"Classes/ObjcLDDictionaryEvaluationDetail.html#/c:@M@LaunchDarkly@objc(cs)DictionaryEvaluationDetail(py)reason":{"name":"reason","abstract":"<p>Undocumented</p>","parent_name":"ObjcLDDictionaryEvaluationDetail"},"Classes/ObjcLDArrayEvaluationDetail.html#/c:@M@LaunchDarkly@objc(cs)ArrayEvaluationDetail(py)value":{"name":"value","abstract":"<p>Undocumented</p>","parent_name":"ObjcLDArrayEvaluationDetail"},"Classes/ObjcLDArrayEvaluationDetail.html#/c:@M@LaunchDarkly@objc(cs)ArrayEvaluationDetail(py)variationIndex":{"name":"variationIndex","abstract":"<p>Undocumented</p>","parent_name":"ObjcLDArrayEvaluationDetail"},"Classes/ObjcLDArrayEvaluationDetail.html#/c:@M@LaunchDarkly@objc(cs)ArrayEvaluationDetail(py)reason":{"name":"reason","abstract":"<p>Undocumented</p>","parent_name":"ObjcLDArrayEvaluationDetail"},"Classes/ObjcLDStringEvaluationDetail.html#/c:@M@LaunchDarkly@objc(cs)LDStringEvaluationDetail(py)value":{"name":"value","abstract":"<p>Undocumented</p>","parent_name":"ObjcLDStringEvaluationDetail"},"Classes/ObjcLDStringEvaluationDetail.html#/c:@M@LaunchDarkly@objc(cs)LDStringEvaluationDetail(py)variationIndex":{"name":"variationIndex","abstract":"<p>Undocumented</p>","parent_name":"ObjcLDStringEvaluationDetail"},"Classes/ObjcLDStringEvaluationDetail.html#/c:@M@LaunchDarkly@objc(cs)LDStringEvaluationDetail(py)reason":{"name":"reason","abstract":"<p>Undocumented</p>","parent_name":"ObjcLDStringEvaluationDetail"},"Classes/ObjcLDDoubleEvaluationDetail.html#/c:@M@LaunchDarkly@objc(cs)LDDoubleEvaluationDetail(py)value":{"name":"value","abstract":"<p>Undocumented</p>","parent_name":"ObjcLDDoubleEvaluationDetail"},"Classes/ObjcLDDoubleEvaluationDetail.html#/c:@M@LaunchDarkly@objc(cs)LDDoubleEvaluationDetail(py)variationIndex":{"name":"variationIndex","abstract":"<p>Undocumented</p>","parent_name":"ObjcLDDoubleEvaluationDetail"},"Classes/ObjcLDDoubleEvaluationDetail.html#/c:@M@LaunchDarkly@objc(cs)LDDoubleEvaluationDetail(py)reason":{"name":"reason","abstract":"<p>Undocumented</p>","parent_name":"ObjcLDDoubleEvaluationDetail"},"Classes/ObjcLDIntegerEvaluationDetail.html#/c:@M@LaunchDarkly@objc(cs)LDIntegerEvaluationDetail(py)value":{"name":"value","abstract":"<p>Undocumented</p>","parent_name":"ObjcLDIntegerEvaluationDetail"},"Classes/ObjcLDIntegerEvaluationDetail.html#/c:@M@LaunchDarkly@objc(cs)LDIntegerEvaluationDetail(py)variationIndex":{"name":"variationIndex","abstract":"<p>Undocumented</p>","parent_name":"ObjcLDIntegerEvaluationDetail"},"Classes/ObjcLDIntegerEvaluationDetail.html#/c:@M@LaunchDarkly@objc(cs)LDIntegerEvaluationDetail(py)reason":{"name":"reason","abstract":"<p>Undocumented</p>","parent_name":"ObjcLDIntegerEvaluationDetail"},"Classes/ObjcLDBoolEvaluationDetail.html#/c:@M@LaunchDarkly@objc(cs)LDBoolEvaluationDetail(py)value":{"name":"value","abstract":"<p>Undocumented</p>","parent_name":"ObjcLDBoolEvaluationDetail"},"Classes/ObjcLDBoolEvaluationDetail.html#/c:@M@LaunchDarkly@objc(cs)LDBoolEvaluationDetail(py)variationIndex":{"name":"variationIndex","abstract":"<p>Undocumented</p>","parent_name":"ObjcLDBoolEvaluationDetail"},"Classes/ObjcLDBoolEvaluationDetail.html#/c:@M@LaunchDarkly@objc(cs)LDBoolEvaluationDetail(py)reason":{"name":"reason","abstract":"<p>Undocumented</p>","parent_name":"ObjcLDBoolEvaluationDetail"},"Classes/ObjcLDBoolEvaluationDetail.html":{"name":"ObjcLDBoolEvaluationDetail","abstract":"<p>Undocumented</p>"},"Classes/ObjcLDIntegerEvaluationDetail.html":{"name":"ObjcLDIntegerEvaluationDetail","abstract":"<p>Undocumented</p>"},"Classes/ObjcLDDoubleEvaluationDetail.html":{"name":"ObjcLDDoubleEvaluationDetail","abstract":"<p>Undocumented</p>"},"Classes/ObjcLDStringEvaluationDetail.html":{"name":"ObjcLDStringEvaluationDetail","abstract":"<p>Undocumented</p>"},"Classes/ObjcLDArrayEvaluationDetail.html":{"name":"ObjcLDArrayEvaluationDetail","abstract":"<p>Undocumented</p>"},"Classes/ObjcLDDictionaryEvaluationDetail.html":{"name":"ObjcLDDictionaryEvaluationDetail","abstract":"<p>Undocumented</p>"},"Classes/ObjcLDChangedFlag.html#/c:@M@LaunchDarkly@objc(cs)LDChangedFlag(py)key":{"name":"key","abstract":"<p>The changed feature flag&rsquo;s key</p>","parent_name":"ObjcLDChangedFlag"},"Classes/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(cpy)privatizableAttributes":{"name":"privatizableAttributes","abstract":"<p>LDUser attributes that can be marked private.</p>","parent_name":"ObjcLDUser"},"Classes/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(cpy)attributeSecondary":{"name":"attributeSecondary","abstract":"<p>LDUser secondary attribute used to make <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)secondary\">secondary</a></code> private</p>","parent_name":"ObjcLDUser"},"Classes/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(cpy)attributeName":{"name":"attributeName","abstract":"<p>LDUser name attribute used to make <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)name\">name</a></code> private</p>","parent_name":"ObjcLDUser"},"Classes/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(cpy)attributeFirstName":{"name":"attributeFirstName","abstract":"<p>LDUser firstName attribute used to make <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)firstName\">firstName</a></code> private</p>","parent_name":"ObjcLDUser"},"Classes/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(cpy)attributeLastName":{"name":"attributeLastName","abstract":"<p>LDUser lastName attribute used to make <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)lastName\">lastName</a></code> private</p>","parent_name":"ObjcLDUser"},"Classes/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(cpy)attributeCountry":{"name":"attributeCountry","abstract":"<p>LDUser country attribute used to make <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)country\">country</a></code> private</p>","parent_name":"ObjcLDUser"},"Classes/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(cpy)attributeIPAddress":{"name":"attributeIPAddress","abstract":"<p>LDUser ipAddress attribute used to make <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)ipAddress\">ipAddress</a></code> private</p>","parent_name":"ObjcLDUser"},"Classes/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(cpy)attributeEmail":{"name":"attributeEmail","abstract":"<p>LDUser email attribute used to make <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)email\">email</a></code> private</p>","parent_name":"ObjcLDUser"},"Classes/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(cpy)attributeAvatar":{"name":"attributeAvatar","abstract":"<p>LDUser avatar attribute used to make <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)avatar\">avatar</a></code> private</p>","parent_name":"ObjcLDUser"},"Classes/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(cpy)attributeCustom":{"name":"attributeCustom","abstract":"<p>LDUser custom attribute used to make <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)custom\">custom</a></code> private</p>","parent_name":"ObjcLDUser"},"Classes/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)key":{"name":"key","abstract":"<p>Client app defined string that uniquely identifies the user. If the client app does not define a key, the SDK will assign an identifier associated with the anonymous user. The key cannot be made private.</p>","parent_name":"ObjcLDUser"},"Classes/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)secondary":{"name":"secondary","abstract":"<p>The secondary key for the user. See the <a href=\"https://docs.launchdarkly.com/home/flags/targeting-users#percentage-rollouts\">documentation</a> for more information on it&rsquo;s use for percentage rollout bucketing.</p>","parent_name":"ObjcLDUser"},"Classes/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)name":{"name":"name","abstract":"<p>Client app defined name for the user. (Default: nil)</p>","parent_name":"ObjcLDUser"},"Classes/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)firstName":{"name":"firstName","abstract":"<p>Client app defined first name for the user. (Default: nil)</p>","parent_name":"ObjcLDUser"},"Classes/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)lastName":{"name":"lastName","abstract":"<p>Client app defined last name for the user. (Default: nil)</p>","parent_name":"ObjcLDUser"},"Classes/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)country":{"name":"country","abstract":"<p>Client app defined country for the user. (Default: nil)</p>","parent_name":"ObjcLDUser"},"Classes/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)ipAddress":{"name":"ipAddress","abstract":"<p>Client app defined ipAddress for the user. (Default: nil)</p>","parent_name":"ObjcLDUser"},"Classes/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)email":{"name":"email","abstract":"<p>Client app defined email address for the user. (Default: nil)</p>","parent_name":"ObjcLDUser"},"Classes/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)avatar":{"name":"avatar","abstract":"<p>Client app defined avatar for the user. (Default: nil)</p>","parent_name":"ObjcLDUser"},"Classes/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)custom":{"name":"custom","abstract":"<p>Client app defined dictionary for the user. The client app may declare top level dictionary items as private. If the client app defines custom as private, the SDK considers the dictionary private except for device &amp; operatingSystem (which cannot be made private). See <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)privateAttributes\">privateAttributes</a></code> for details. (Default: nil)</p>","parent_name":"ObjcLDUser"},"Classes/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)isAnonymous":{"name":"isAnonymous","abstract":"<p>Client app defined isAnonymous for the user. If the client app does not define isAnonymous, the SDK will use the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)key\">key</a></code> to set this attribute. isAnonymous cannot be made private. (Default: YES)</p>","parent_name":"ObjcLDUser"},"Classes/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)device":{"name":"device","abstract":"<p>Client app defined device for the user. The SDK will determine the device automatically, however the client app can override the value. The SDK will insert the device into the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)custom\">custom</a></code> dictionary. The device cannot be made private. (Default: the system identified device)</p>","parent_name":"ObjcLDUser"},"Classes/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)operatingSystem":{"name":"operatingSystem","abstract":"<p>Client app defined operatingSystem for the user. The SDK will determine the operatingSystem automatically, however the client app can override the value. The SDK will insert the operatingSystem into the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)custom\">custom</a></code> dictionary. The operatingSystem cannot be made private. (Default: the system identified operating system)</p>","parent_name":"ObjcLDUser"},"Classes/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)privateAttributes":{"name":"privateAttributes","abstract":"<p>Client app defined privateAttributes for the user.</p>","parent_name":"ObjcLDUser"},"Classes/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(im)init":{"name":"init()","abstract":"<p>Initializer to create a LDUser. Client configurable attributes are set to their default value. The SDK will automatically set <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)key\">key</a></code>, <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)device\">device</a></code>, <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)operatingSystem\">operatingSystem</a></code>, and <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)isAnonymous\">isAnonymous</a></code> attributes. The SDK embeds <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)device\">device</a></code> and <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)operatingSystem\">operatingSystem</a></code> into the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)custom\">custom</a></code> dictionary for transmission to LaunchDarkly.</p>","parent_name":"ObjcLDUser"},"Classes/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(im)initWithKey:":{"name":"init(key:)","abstract":"<p>Initializer to create a LDUser with a specific key. Other client configurable attributes are set to their default value. The SDK will automatically set <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)key\">key</a></code>, <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)device\">device</a></code>, <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)operatingSystem\">operatingSystem</a></code>, and <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)isAnonymous\">isAnonymous</a></code> attributes. The SDK embeds <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)device\">device</a></code> and <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)operatingSystem\">operatingSystem</a></code> into the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)custom\">custom</a></code> dictionary for transmission to LaunchDarkly.</p>","parent_name":"ObjcLDUser"},"Classes/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(im)initWithUserDictionary:":{"name":"init(userDictionary:)","abstract":"<p>Initializer that takes a NSDictionary and creates a LDUser from the contents. Uses any keys present to define corresponding attribute values. Initializes attributes not present in the dictionary to their default value. The initializer attempts to set <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)device\">device</a></code> and <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)operatingSystem\">operatingSystem</a></code> from corresponding values embedded in <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(py)custom\">custom</a></code>. The initializer attempts to set feature flags from values set in <code>config</code>.</p>","parent_name":"ObjcLDUser"},"Classes/ObjcLDUser.html#/c:@M@LaunchDarkly@objc(cs)LDUser(im)isEqualWithObject:":{"name":"isEqual(object:)","abstract":"<p>Compares users by comparing their user keys only, to allow the client app to collect user information over time</p>","parent_name":"ObjcLDUser"},"Classes/ObjcLDConfig.html#/c:@M@LaunchDarkly@objc(cs)LDConfig(py)mobileKey":{"name":"mobileKey","abstract":"<p>The Mobile key from your <a href=\"app.launchdarkly.com\">LaunchDarkly Account</a> settings (on the left at the bottom). If you have multiple projects be sure to choose the correct Mobile key.</p>","parent_name":"ObjcLDConfig"},"Classes/ObjcLDConfig.html#/c:@M@LaunchDarkly@objc(cs)LDConfig(py)baseUrl":{"name":"baseUrl","abstract":"<p>The url for making feature flag requests. Do not change unless instructed by LaunchDarkly.</p>","parent_name":"ObjcLDConfig"},"Classes/ObjcLDConfig.html#/c:@M@LaunchDarkly@objc(cs)LDConfig(py)eventsUrl":{"name":"eventsUrl","abstract":"<p>The url for making event reports. Do not change unless instructed by LaunchDarkly.</p>","parent_name":"ObjcLDConfig"},"Classes/ObjcLDConfig.html#/c:@M@LaunchDarkly@objc(cs)LDConfig(py)streamUrl":{"name":"streamUrl","abstract":"<p>The url for connecting to the <em>clientstream</em>. Do not change unless instructed by LaunchDarkly.</p>","parent_name":"ObjcLDConfig"},"Classes/ObjcLDConfig.html#/c:@M@LaunchDarkly@objc(cs)LDConfig(py)eventCapacity":{"name":"eventCapacity","abstract":"<p>The maximum number of analytics events the LDClient can store. When the LDClient event store reaches the eventCapacity, the SDK discards events until it successfully reports them to LaunchDarkly. (Default: 100)</p>","parent_name":"ObjcLDConfig"},"Classes/ObjcLDConfig.html#/c:@M@LaunchDarkly@objc(cs)LDConfig(py)connectionTimeout":{"name":"connectionTimeout","abstract":"<p>The timeout interval for flag requests and event reports. (Default: 10 seconds)</p>","parent_name":"ObjcLDConfig"},"Classes/ObjcLDConfig.html#/c:@M@LaunchDarkly@objc(cs)LDConfig(py)eventFlushInterval":{"name":"eventFlushInterval","abstract":"<p>The time interval between event reports (Default: 30 seconds)</p>","parent_name":"ObjcLDConfig"},"Classes/ObjcLDConfig.html#/c:@M@LaunchDarkly@objc(cs)LDConfig(py)flagPollingInterval":{"name":"flagPollingInterval","abstract":"<p>The interval between feature flag requests. Used only for polling mode. (Default: 5 minutes)</p>","parent_name":"ObjcLDConfig"},"Classes/ObjcLDConfig.html#/c:@M@LaunchDarkly@objc(cs)LDConfig(py)backgroundFlagPollingInterval":{"name":"backgroundFlagPollingInterval","abstract":"<p>The interval between feature flag requests while running in the background. Used only for polling mode. (Default: 60 minutes)</p>","parent_name":"ObjcLDConfig"},"Classes/ObjcLDConfig.html#/c:@M@LaunchDarkly@objc(cs)LDConfig(py)minFlagPollingInterval":{"name":"minFlagPollingInterval","abstract":"<p>The minimum interval between feature flag requests. Used only for polling mode. (5 minutes)</p>","parent_name":"ObjcLDConfig"},"Classes/ObjcLDConfig.html#/c:@M@LaunchDarkly@objc(cs)LDConfig(py)minBackgroundFlagPollInterval":{"name":"minBackgroundFlagPollInterval","abstract":"<p>The minimum interval between feature flag requests while running in the background. Used only for polling mode. (15 minutes)</p>","parent_name":"ObjcLDConfig"},"Classes/ObjcLDConfig.html#/c:@M@LaunchDarkly@objc(cs)LDConfig(py)streamingMode":{"name":"streamingMode","abstract":"<p>Controls the method the SDK uses to keep feature flags updated. When set to .streaming, connects to <code>clientstream</code> which notifies the SDK of feature flag changes. When set to .polling, an efficient polling mechanism is used to periodically request feature flag values. Ignored for watchOS, which always uses .polling. See <code><a href=\"36f8f5912051ae747ef441d6511ca4cbEnums/LDStreamingMode.html\">LDStreamingMode</a></code> for more details. (Default: .streaming)</p>","parent_name":"ObjcLDConfig"},"Classes/ObjcLDConfig.html#/c:@M@LaunchDarkly@objc(cs)LDConfig(py)enableBackgroundUpdates":{"name":"enableBackgroundUpdates","abstract":"<p>Enables feature flag updates when your app is in the background. Allowed on macOS only. (Default: NO)</p>","parent_name":"ObjcLDConfig"},"Classes/ObjcLDConfig.html#/c:@M@LaunchDarkly@objc(cs)LDConfig(py)startOnline":{"name":"startOnline","abstract":"<p>Controls LDClient start behavior. When YES, calling start causes LDClient to go online. When NO, calling start causes LDClient to remain offline. If offline at start, set the client online to receive flag updates. (Default: YES)</p>","parent_name":"ObjcLDConfig"},"Classes/ObjcLDConfig.html#/c:@M@LaunchDarkly@objc(cs)LDConfig(py)allUserAttributesPrivate":{"name":"allUserAttributesPrivate","abstract":"<p>Treat all user attributes as private for event reporting for all users.</p>","parent_name":"ObjcLDConfig"},"Classes/ObjcLDConfig.html#/c:@M@LaunchDarkly@objc(cs)LDConfig(py)privateUserAttributes":{"name":"privateUserAttributes","abstract":"<p>User attributes and top level custom dictionary keys to treat as private for event reporting for all users.</p>","parent_name":"ObjcLDConfig"},"Classes/ObjcLDConfig.html#/c:@M@LaunchDarkly@objc(cs)LDConfig(py)useReport":{"name":"useReport","abstract":"<p>Directs the SDK to use REPORT for HTTP requests to connect to <code>clientstream</code> and make feature flag requests. When NO the SDK uses GET for these requests. Do not use unless advised by LaunchDarkly. (Default: NO)</p>","parent_name":"ObjcLDConfig"},"Classes/ObjcLDConfig.html#/c:@M@LaunchDarkly@objc(cs)LDConfig(py)inlineUserInEvents":{"name":"inlineUserInEvents","abstract":"<p>Controls how the SDK reports the user in analytics event reports. When set to YES, event reports will contain the user attributes, except attributes marked as private. When set to NO, event reports will contain the user&rsquo;s key only, reducing the size of event reports. (Default: NO)</p>","parent_name":"ObjcLDConfig"},"Classes/ObjcLDConfig.html#/c:@M@LaunchDarkly@objc(cs)LDConfig(py)debugMode":{"name":"debugMode","abstract":"<p>Enables logging for debugging. (Default: NO)</p>","parent_name":"ObjcLDConfig"},"Classes/ObjcLDConfig.html#/c:@M@LaunchDarkly@objc(cs)LDConfig(py)evaluationReasons":{"name":"evaluationReasons","abstract":"<p>Enables requesting evaluation reasons for all flags. (Default: NO)</p>","parent_name":"ObjcLDConfig"},"Classes/ObjcLDConfig.html#/c:@M@LaunchDarkly@objc(cs)LDConfig(py)maxCachedUsers":{"name":"maxCachedUsers","abstract":"<p>An Integer that tells UserEnvironmentFlagCache the maximum number of users to locally cache. Can be set to -1 for unlimited cached users. (Default: 5)</p>","parent_name":"ObjcLDConfig"},"Classes/ObjcLDConfig.html#/c:@M@LaunchDarkly@objc(cs)LDConfig(py)diagnosticOptOut":{"name":"diagnosticOptOut","abstract":"<p>Set to true to opt out of sending diagnostic data. (Default: false)</p>","parent_name":"ObjcLDConfig"},"Classes/ObjcLDConfig.html#/c:@M@LaunchDarkly@objc(cs)LDConfig(py)diagnosticRecordingInterval":{"name":"diagnosticRecordingInterval","abstract":"<p>The interval between sending periodic diagnostic data. (Default: 15 minutes)</p>","parent_name":"ObjcLDConfig"},"Classes/ObjcLDConfig.html#/c:@M@LaunchDarkly@objc(cs)LDConfig(py)wrapperName":{"name":"wrapperName","abstract":"<p>For use by wrapper libraries to set an identifying name for the wrapper being used. This will be sent in the &ldquo;X-LaunchDarkly-Wrapper&rdquo; header on requests to the LaunchDarkly servers to allow recording metrics on the usage of these wrapper libraries.</p>","parent_name":"ObjcLDConfig"},"Classes/ObjcLDConfig.html#/c:@M@LaunchDarkly@objc(cs)LDConfig(py)wrapperVersion":{"name":"wrapperVersion","abstract":"<p>For use by wrapper libraries to report the version of the library in use. If the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDConfig.html#/c:@M@LaunchDarkly@objc(cs)LDConfig(py)wrapperName\">wrapperName</a></code> has not been set this field will be ignored. Otherwise the verison strill will be included with the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDConfig.html#/c:@M@LaunchDarkly@objc(cs)LDConfig(py)wrapperName\">wrapperName</a></code> in the &ldquo;X-LaunchDarkly-Wrapper&rdquo; header on requests to the LaunchDarkly servers.</p>","parent_name":"ObjcLDConfig"},"Classes/ObjcLDConfig.html#/c:@M@LaunchDarkly@objc(cs)LDConfig(im)getSecondaryMobileKeys":{"name":"getSecondaryMobileKeys()","abstract":"<p>Returns a Dictionary of identifying names to unique mobile keys to access secondary environments.</p>","parent_name":"ObjcLDConfig"},"Classes/ObjcLDConfig.html#/c:@M@LaunchDarkly@objc(cs)LDConfig(im)setSecondaryMobileKeys:error:":{"name":"setSecondaryMobileKeys(_:)","abstract":"<p>Sets a Dictionary of identifying names to unique mobile keys to access secondary environments in the LDConfig. Throws if you try to add duplicate keys or put the primary key or name in secondaryMobileKeys.</p>","parent_name":"ObjcLDConfig"},"Classes/ObjcLDConfig.html#/c:@M@LaunchDarkly@objc(cs)LDConfig(im)initWithMobileKey:":{"name":"init(mobileKey:)","abstract":"<p>LDConfig constructor. Configurable values are all set to their default values. The client app can modify these values as desired. Note that client app developers may prefer to get the LDConfig from <code>LDClient.config</code> (<code>ObjcLDClient.config</code>) in order to retain previously set values.</p>","parent_name":"ObjcLDConfig"},"Classes/ObjcLDConfig.html#/c:@M@LaunchDarkly@objc(cs)LDConfig(im)isEqualWithObject:":{"name":"isEqual(object:)","abstract":"<p>Compares the settable properties in 2 LDConfig structs</p>","parent_name":"ObjcLDConfig"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(py)isOnline":{"name":"isOnline","abstract":"<p>Reports the online/offline state of the LDClient.</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(im)setOnline:":{"name":"setOnline(_:)","abstract":"<p>Set the LDClient online/offline.</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(im)setOnline:completion:":{"name":"setOnline(_:completion:)","abstract":"<p>Set the LDClient online/offline.</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(py)isInitialized":{"name":"isInitialized","abstract":"<p>Reports the initialization state of the LDClient.</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(im)identifyWithUser:":{"name":"identify(user:)","abstract":"<p>The LDUser set into the LDClient may affect the set of feature flags returned by the LaunchDarkly server, and ties event tracking to the user. See <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/LDUser.html\">LDUser</a></code> for details about what information can be retained.</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(im)identifyWithUser:completion:":{"name":"identify(user:completion:)","abstract":"<p>The LDUser set into the LDClient may affect the set of feature flags returned by the LaunchDarkly server, and ties event tracking to the user. See <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/LDUser.html\">LDUser</a></code> for details about what information can be retained.</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(im)close":{"name":"close()","abstract":"<p>Stops the LDClient. Stopping the client means the LDClient goes offline and stops recording events. LDClient will no longer provide feature flag values, only returning default values.</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(cm)get":{"name":"get()","abstract":"<p>Returns an ObjcLDClient wrapper that contains the primary LDClient instance.</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(cm)getWithEnvironment:":{"name":"get(environment:)","abstract":"<p>Returns an LDClient instance for a given environment.</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(im)boolVariationForKey:defaultValue:":{"name":"boolVariation(forKey:defaultValue:)","abstract":"<p>Returns the BOOL variation for the given feature flag. If the flag does not exist, cannot be cast to a BOOL, or the LDClient is not started, returns the default value.</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(im)boolVariationDetailForKey:defaultValue:":{"name":"boolVariationDetail(forKey:defaultValue:)","abstract":"<p>See <a href=\"x-source-tag://boolVariation\">boolVariation</a> for more information on variation methods.</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(im)integerVariationForKey:defaultValue:":{"name":"integerVariation(forKey:defaultValue:)","abstract":"<p>Returns the NSInteger variation for the given feature flag. If the flag does not exist, cannot be cast to a NSInteger, or the LDClient is not started, returns the default value.</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(im)integerVariationDetailForKey:defaultValue:":{"name":"integerVariationDetail(forKey:defaultValue:)","abstract":"<p>See <a href=\"x-source-tag://integerVariation\">integerVariation</a> for more information on variation methods.</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(im)doubleVariationForKey:defaultValue:":{"name":"doubleVariation(forKey:defaultValue:)","abstract":"<p>Returns the double variation for the given feature flag. If the flag does not exist, cannot be cast to a double, or the LDClient is not started, returns the default value.</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(im)doubleVariationDetailForKey:defaultValue:":{"name":"doubleVariationDetail(forKey:defaultValue:)","abstract":"<p>See <a href=\"x-source-tag://doubleVariation\">doubleVariation</a> for more information on variation methods.</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(im)stringVariationForKey:defaultValue:":{"name":"stringVariation(forKey:defaultValue:)","abstract":"<p>Returns the NSString variation for the given feature flag. If the flag does not exist, cannot be cast to a NSString, or the LDClient is not started, returns the default value, which may be nil.</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(im)stringVariationDetailForKey:defaultValue:":{"name":"stringVariationDetail(forKey:defaultValue:)","abstract":"<p>See <a href=\"x-source-tag://stringVariation\">stringVariation</a> for more information on variation methods.</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(im)arrayVariationForKey:defaultValue:":{"name":"arrayVariation(forKey:defaultValue:)","abstract":"<p>Returns the NSArray variation for the given feature flag. If the flag does not exist, cannot be cast to a NSArray, or the LDClient is not started, returns the default value, which may be nil..</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(im)arrayVariationDetailForKey:defaultValue:":{"name":"arrayVariationDetail(forKey:defaultValue:)","abstract":"<p>See <a href=\"x-source-tag://arrayVariation\">arrayVariation</a> for more information on variation methods.</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(im)dictionaryVariationForKey:defaultValue:":{"name":"dictionaryVariation(forKey:defaultValue:)","abstract":"<p>Returns the NSDictionary variation for the given feature flag. If the flag does not exist, cannot be cast to a NSDictionary, or the LDClient is not started, returns the default value, which may be nil..</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(im)dictionaryVariationDetailForKey:defaultValue:":{"name":"dictionaryVariationDetail(forKey:defaultValue:)","abstract":"<p>See <a href=\"x-source-tag://dictionaryVariation\">dictionaryVariation</a> for more information on variation methods.</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(py)allFlags":{"name":"allFlags","abstract":"<p>Returns a dictionary with the flag keys and their values. If the LDClient is not started, returns nil.</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(im)observeBool:owner:handler:":{"name":"observeBool(_:owner:handler:)","abstract":"<p>Sets a handler for the specified BOOL flag key executed on the specified owner. If the flag&rsquo;s value changes, executes the handler, passing in the <code>changedFlag</code> containing the old and new flag values. See <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDBoolChangedFlag.html\">ObjcLDBoolChangedFlag</a></code> for details.</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(im)observeInteger:owner:handler:":{"name":"observeInteger(_:owner:handler:)","abstract":"<p>Sets a handler for the specified NSInteger flag key executed on the specified owner. If the flag&rsquo;s value changes, executes the handler, passing in the <code>changedFlag</code> containing the old and new flag values. See <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDIntegerChangedFlag.html\">ObjcLDIntegerChangedFlag</a></code> for details.</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(im)observeDouble:owner:handler:":{"name":"observeDouble(_:owner:handler:)","abstract":"<p>Sets a handler for the specified double flag key executed on the specified owner. If the flag&rsquo;s value changes, executes the handler, passing in the <code>changedFlag</code> containing the old and new flag values. See <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDDoubleChangedFlag.html\">ObjcLDDoubleChangedFlag</a></code> for details.</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(im)observeString:owner:handler:":{"name":"observeString(_:owner:handler:)","abstract":"<p>Sets a handler for the specified NSString flag key executed on the specified owner. If the flag&rsquo;s value changes, executes the handler, passing in the <code>changedFlag</code> containing the old and new flag values. See <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDStringChangedFlag.html\">ObjcLDStringChangedFlag</a></code> for details.</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(im)observeArray:owner:handler:":{"name":"observeArray(_:owner:handler:)","abstract":"<p>Sets a handler for the specified NSArray flag key executed on the specified owner. If the flag&rsquo;s value changes, executes the handler, passing in the <code>changedFlag</code> containing the old and new flag values. See <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDArrayChangedFlag.html\">ObjcLDArrayChangedFlag</a></code> for details.</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(im)observeDictionary:owner:handler:":{"name":"observeDictionary(_:owner:handler:)","abstract":"<p>Sets a handler for the specified NSDictionary flag key executed on the specified owner. If the flag&rsquo;s value changes, executes the handler, passing in the <code>changedFlag</code> containing the old and new flag values. See <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDDictionaryChangedFlag.html\">ObjcLDDictionaryChangedFlag</a></code> for details.</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(im)observeKeys:owner:handler:":{"name":"observeKeys(_:owner:handler:)","abstract":"<p>Sets a handler for the specified flag keys executed on the specified owner. If any observed flag&rsquo;s value changes, executes the handler 1 time, passing in a dictionary of <NSString*, LDChangedFlag*> containing the old and new flag values. See LDChangedFlag (<code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDChangedFlag.html\">ObjcLDChangedFlag</a></code>) for details.</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(im)observeAllKeysWithOwner:handler:":{"name":"observeAllKeys(owner:handler:)","abstract":"<p>Sets a handler for all flag keys executed on the specified owner. If any flag&rsquo;s value changes, executes the handler 1 time, passing in a dictionary of <NSString*, LDChangedFlag*> containing the old and new flag values. See LDChangedFlag (<code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ObjcLDChangedFlag.html\">ObjcLDChangedFlag</a></code>) for details.</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(im)observeFlagsUnchangedWithOwner:handler:":{"name":"observeFlagsUnchanged(owner:handler:)","abstract":"<p>Sets a handler executed when a flag update leaves the flags unchanged from their previous values.</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(im)stopObservingForOwner:":{"name":"stopObserving(owner:)","abstract":"<p>Removes all observers for the given owner, including a flagsUnchangedObserver</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(im)observeErrorWithOwner:handler:":{"name":"observeError(owner:handler:)","abstract":"<p>Sets a handler executed when an error occurs while processing flag or event responses.</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/s:12LaunchDarkly12ObjcLDClientC0C24LDBoolChangedFlagHandlera":{"name":"ObjcLDBoolChangedFlagHandler","abstract":"<p>Handler passed to the client app when a BOOL feature flag value changes</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/s:12LaunchDarkly12ObjcLDClientC0C27LDIntegerChangedFlagHandlera":{"name":"ObjcLDIntegerChangedFlagHandler","abstract":"<p>Handler passed to the client app when a NSInteger feature flag value changes</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/s:12LaunchDarkly12ObjcLDClientC0C26LDDoubleChangedFlagHandlera":{"name":"ObjcLDDoubleChangedFlagHandler","abstract":"<p>Handler passed to the client app when a double feature flag value changes</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/s:12LaunchDarkly12ObjcLDClientC0C26LDStringChangedFlagHandlera":{"name":"ObjcLDStringChangedFlagHandler","abstract":"<p>Handler passed to the client app when a NSString feature flag value changes</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/s:12LaunchDarkly12ObjcLDClientC0C25LDArrayChangedFlagHandlera":{"name":"ObjcLDArrayChangedFlagHandler","abstract":"<p>Handler passed to the client app when a NSArray feature flag value changes</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/s:12LaunchDarkly12ObjcLDClientC0C30LDDictionaryChangedFlagHandlera":{"name":"ObjcLDDictionaryChangedFlagHandler","abstract":"<p>Handler passed to the client app when a NSArray feature flag value changes</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/s:12LaunchDarkly12ObjcLDClientC0C30LDChangedFlagCollectionHandlera":{"name":"ObjcLDChangedFlagCollectionHandler","abstract":"<p>Handler passed to the client app when a NSArray feature flag value changes</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(im)trackWithKey:data:error:":{"name":"track(key:data:)","abstract":"<p>Adds a custom event to the LDClient event store. A client app can set a tracking event to allow client customized data analysis. Once an app has called <code>track</code>, the app cannot remove the event from the event store.</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(im)trackWithKey:data:metricValue:error:":{"name":"track(key:data:metricValue:)","abstract":"<p>See (track)[x-source-tag://track] for full documentation.</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(im)flush":{"name":"flush()","abstract":"<p>Tells the SDK to immediately send any currently queued events to LaunchDarkly.</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(im)aliasWithContext:previousContext:":{"name":"alias(context:previousContext:)","abstract":"<p>Tells the SDK to generate an alias event.</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(cm)startWithConfiguration:user:completion:":{"name":"start(configuration:user:completion:)","abstract":"<p>Starts the LDClient using the passed in <code>config</code> &amp; <code>user</code>. Call this before requesting feature flag values. The LDClient will not go online until you call this method.","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html#/c:@M@LaunchDarkly@objc(cs)LDClient(cm)startWithConfiguration:user:startWaitSeconds:completion:":{"name":"start(configuration:user:startWaitSeconds:completion:)","abstract":"<p>See <a href=\"x-source-tag://start\">start</a> for more information on starting the SDK.</p>","parent_name":"ObjcLDClient"},"Classes/ObjcLDClient.html":{"name":"ObjcLDClient","abstract":"<p>The LDClient is the heart of the SDK, providing client apps running iOS, watchOS, macOS, or tvOS access to LaunchDarkly services. This singleton provides the ability to set a configuration (LDConfig) that controls how the LDClient talks to LaunchDarkly servers, and a user (LDUser) that provides finer control on the feature flag values delivered to LDClient. Once the LDClient has started, it connects to LaunchDarkly&rsquo;s servers to get the feature flag values you set in the Dashboard.</p>"},"Classes/ObjcLDConfig.html":{"name":"ObjcLDConfig","abstract":"<p>Use LDConfig to configure the LDClient. When initialized, a LDConfig contains the default values which can be changed as needed.</p>"},"Classes/ObjcLDUser.html":{"name":"ObjcLDUser","abstract":"<p>LDUser allows clients to collect information about users in order to refine the feature flag values sent to the SDK. For example, the client app may launch with the SDK defined anonymous user. As the user works with the client app, information may be collected as needed and sent to LaunchDarkly. The client app controls the information collected, which LaunchDarkly does not use except as the client directs to refine feature flags. Client apps should follow <a href=\"apple.com/legal/privacy\">Apple&rsquo;s Privacy Policy</a> when collecting user information.</p>"},"Classes/ObjcLDChangedFlag.html":{"name":"ObjcLDChangedFlag","abstract":"<p>Collects the elements of a feature flag that changed as a result of a <code>clientstream</code> update or feature flag request. The SDK will pass a typed ObjcLDChangedFlag or a collection of ObjcLDChangedFlags into feature flag observer blocks. This is the base type for the typed ObjcLDChangedFlags passed into observer blocks. The client app will have to convert the ObjcLDChangedFlag into the expected typed ObjcLDChangedFlag type.</p>"},"Classes/LDInvalidArgumentError.html#/s:12LaunchDarkly22LDInvalidArgumentErrorC20localizedDescriptionSSvp":{"name":"localizedDescription","abstract":"<p>Undocumented</p>","parent_name":"LDInvalidArgumentError"},"Enums/LDStreamingMode.html#/s:12LaunchDarkly15LDStreamingModeO9streamingyA2CmF":{"name":"streaming","abstract":"<p>In streaming mode, the LDClient opens a long-running connection to LaunchDarkly&rsquo;s streaming server (called <em>clientstream</em>). When a flag value changes on the server, the clientstream notifies the SDK to update the value. Streaming mode is not available on watchOS. On iOS and tvOS, the client app must be running in the foreground to connect to clientstream. On macOS the client app may run in either foreground or background to connect to clientstream. If streaming mode is not available, the SDK reverts to polling mode.</p>","parent_name":"LDStreamingMode"},"Enums/LDStreamingMode.html#/s:12LaunchDarkly15LDStreamingModeO7pollingyA2CmF":{"name":"polling","abstract":"<p>In polling mode, the LDClient requests feature flags from LaunchDarkly&rsquo;s app server at regular intervals defined in the LDConfig. When a flag value changes on the server, the LDClient will learn of the change the next time the SDK requests feature flags.</p>","parent_name":"LDStreamingMode"},"Enums/LDStreamingMode.html":{"name":"LDStreamingMode","abstract":"<p>Defines the connection modes available to set into LDClient.</p>"},"Other%20Types.html#/s:12LaunchDarkly22LDFlagValueConvertibleP":{"name":"LDFlagValueConvertible","abstract":"<p>Protocol used by the SDK to limit feature flag types to those representable on LaunchDarkly servers. Client app developers should not need to use this protocol. The protocol is public because <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/LDClient.html#/s:12LaunchDarkly8LDClientC9variation6forKey12defaultValuexSS_xtAA06LDFlagH11ConvertibleRzlF\">LDClient.variation(forKey:defaultValue:)</a></code> and <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/LDClient.html#/s:12LaunchDarkly8LDClientC15variationDetail6forKey12defaultValueAA012LDEvaluationE0CyxGSS_xtAA06LDFlagI11ConvertibleRzlF\">LDClient.variationDetail(forKey:defaultValue:)</a></code> return a type that conforms to this protocol. See <code>LDFlagValue</code> for types that LaunchDarkly feature flags can take.</p>"},"Other%20Types.html#/s:12LaunchDarkly9LDFlagKeya":{"name":"LDFlagKey","abstract":"<p>The feature flag key is a String. This typealias helps define where the SDK expects the string to be a feature flag key.</p>"},"Classes/LDInvalidArgumentError.html":{"name":"LDInvalidArgumentError","abstract":"<p>Undocumented</p>"},"Other%20Types.html#/s:12LaunchDarkly14LDErrorHandlera":{"name":"LDErrorHandler","abstract":"<p>A closure used to notify an observer owner that an error occurred during feature flag processing.</p>"},"Structs/ConnectionInformation/LastConnectionFailureReason.html#/s:s23CustomStringConvertibleP11descriptionSSvp":{"name":"description","parent_name":"LastConnectionFailureReason"},"Structs/ConnectionInformation/LastConnectionFailureReason.html#/s:12LaunchDarkly21ConnectionInformationV04LastC13FailureReasonO12unauthorizedyA2EmF":{"name":"unauthorized","abstract":"<p>Undocumented</p>","parent_name":"LastConnectionFailureReason"},"Structs/ConnectionInformation/LastConnectionFailureReason.html#/s:12LaunchDarkly21ConnectionInformationV04LastC13FailureReasonO9httpErroryAESicAEmF":{"name":"httpError(_:)","abstract":"<p>Undocumented</p>","parent_name":"LastConnectionFailureReason"},"Structs/ConnectionInformation/LastConnectionFailureReason.html#/s:12LaunchDarkly21ConnectionInformationV04LastC13FailureReasonO12unknownErroryAESScAEmF":{"name":"unknownError(_:)","abstract":"<p>Undocumented</p>","parent_name":"LastConnectionFailureReason"},"Structs/ConnectionInformation/LastConnectionFailureReason.html#/s:12LaunchDarkly21ConnectionInformationV04LastC13FailureReasonO4noneyA2EmF":{"name":"none","abstract":"<p>Undocumented</p>","parent_name":"LastConnectionFailureReason"},"Structs/ConnectionInformation/LastConnectionFailureReason.html#/s:12LaunchDarkly21ConnectionInformationV04LastC13FailureReasonO4fromAEs7Decoder_p_tKcfc":{"name":"init(from:)","abstract":"<p>Decode a ConnectionInformation.LastConnectionFailureReason enum using Codable</p>","parent_name":"LastConnectionFailureReason"},"Structs/ConnectionInformation/LastConnectionFailureReason.html#/s:12LaunchDarkly21ConnectionInformationV04LastC13FailureReasonO6encode2toys7Encoder_p_tKF":{"name":"encode(to:)","abstract":"<p>Encode a ConnectionInformation.LastConnectionFailureReason enum using Codable</p>","parent_name":"LastConnectionFailureReason"},"Structs/ConnectionInformation/ConnectionMode.html#/s:12LaunchDarkly21ConnectionInformationV0C4ModeO9streamingyA2EmF":{"name":"streaming","abstract":"<p>Undocumented</p>","parent_name":"ConnectionMode"},"Structs/ConnectionInformation/ConnectionMode.html#/s:12LaunchDarkly21ConnectionInformationV0C4ModeO7offlineyA2EmF":{"name":"offline","abstract":"<p>Undocumented</p>","parent_name":"ConnectionMode"},"Structs/ConnectionInformation/ConnectionMode.html#/s:12LaunchDarkly21ConnectionInformationV0C4ModeO021establishingStreamingC0yA2EmF":{"name":"establishingStreamingConnection","abstract":"<p>Undocumented</p>","parent_name":"ConnectionMode"},"Structs/ConnectionInformation/ConnectionMode.html#/s:12LaunchDarkly21ConnectionInformationV0C4ModeO7pollingyA2EmF":{"name":"polling","abstract":"<p>Undocumented</p>","parent_name":"ConnectionMode"},"Structs/ConnectionInformation/ConnectionMode.html":{"name":"ConnectionMode","abstract":"<p>Undocumented</p>","parent_name":"ConnectionInformation"},"Structs/ConnectionInformation/LastConnectionFailureReason.html":{"name":"LastConnectionFailureReason","abstract":"<p>Undocumented</p>","parent_name":"ConnectionInformation"},"Structs/ConnectionInformation.html#/s:12LaunchDarkly21ConnectionInformationV9ConstantsV":{"name":"Constants","abstract":"<p>Undocumented</p>","parent_name":"ConnectionInformation"},"Structs/ConnectionInformation.html#/s:12LaunchDarkly21ConnectionInformationV21lastKnownFlagValidity10Foundation4DateVSgvp":{"name":"lastKnownFlagValidity","abstract":"<p>Undocumented</p>","parent_name":"ConnectionInformation"},"Structs/ConnectionInformation.html#/s:12LaunchDarkly21ConnectionInformationV010lastFailedC010Foundation4DateVSgvp":{"name":"lastFailedConnection","abstract":"<p>Undocumented</p>","parent_name":"ConnectionInformation"},"Structs/ConnectionInformation.html#/s:12LaunchDarkly21ConnectionInformationV07currentC4ModeAC0cF0Ovp":{"name":"currentConnectionMode","abstract":"<p>Undocumented</p>","parent_name":"ConnectionInformation"},"Structs/ConnectionInformation.html#/s:12LaunchDarkly21ConnectionInformationV04lastC13FailureReasonAC04LastcfG0Ovp":{"name":"lastConnectionFailureReason","abstract":"<p>Undocumented</p>","parent_name":"ConnectionInformation"},"Structs/ConnectionInformation.html#/s:s23CustomStringConvertibleP11descriptionSSvp":{"name":"description","parent_name":"ConnectionInformation"},"Structs/ConnectionInformation.html":{"name":"ConnectionInformation","abstract":"<p>Undocumented</p>"},"Connection%20Information.html#/s:12LaunchDarkly30LDConnectionModeChangedHandlera":{"name":"LDConnectionModeChangedHandler","abstract":"<p>A closure used to notify an observer owner that the current connection mode has changed.</p>"},"Structs/LDChangedFlag.html#/s:12LaunchDarkly13LDChangedFlagV3keySSvp":{"name":"key","abstract":"<p>The key of the changed feature flag</p>","parent_name":"LDChangedFlag"},"Structs/LDChangedFlag.html#/s:12LaunchDarkly13LDChangedFlagV8oldValueypSgvp":{"name":"oldValue","abstract":"<p>The feature flag&rsquo;s value before the change. The client app will have to convert the oldValue into the expected type.</p>","parent_name":"LDChangedFlag"},"Structs/LDChangedFlag.html#/s:12LaunchDarkly13LDChangedFlagV8newValueypSgvp":{"name":"newValue","abstract":"<p>The feature flag&rsquo;s value after the change. The client app will have to convert the newValue into the expected type.</p>","parent_name":"LDChangedFlag"},"Structs/LDChangedFlag.html#/s:12LaunchDarkly13LDChangedFlagV011objcChangedD0AA04ObjccD0Cvp":{"name":"objcChangedFlag","abstract":"<p>An NSObject wrapper for the Swift LDChangeFlag enum. Intended for use in mixed apps when Swift code needs to pass a LDChangeFlag into an Objective-C method.</p>","parent_name":"LDChangedFlag"},"Flag%20Change%20Observers.html#/s:12LaunchDarkly15LDObserverOwnera":{"name":"LDObserverOwner","abstract":"<p>An object can own an observer for as long as the object exists. Swift structs and enums cannot be observer owners.</p>"},"Structs/LDChangedFlag.html":{"name":"LDChangedFlag","abstract":"<p>Collects the elements of a feature flag that changed as a result of a <code>clientstream</code> update or feature flag request. The SDK will pass a LDChangedFlag or a collection of LDChangedFlags into feature flag observer closures. The client app will have to convert the old/newValue into the expected type. See <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/LDClient.html#/s:12LaunchDarkly8LDClientC7observe3key5owner7handlerySS_yXlyAA13LDChangedFlagVctF\">LDClient.observe(key:owner:handler:)</a></code>, <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/LDClient.html#/s:12LaunchDarkly8LDClientC7observe4keys5owner7handlerySaySSG_yXlySDySSAA13LDChangedFlagVGctF\">LDClient.observe(keys:owner:handler:)</a></code>, and <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/LDClient.html#/s:12LaunchDarkly8LDClientC10observeAll5owner7handleryyXl_ySDySSAA13LDChangedFlagVGctF\">LDClient.observeAll(owner:handler:)</a></code> for more details.</p>"},"Flag%20Change%20Observers.html#/s:12LaunchDarkly19LDFlagChangeHandlera":{"name":"LDFlagChangeHandler","abstract":"<p>A closure used to notify an observer owner of a change to a single feature flag&rsquo;s value.</p>"},"Flag%20Change%20Observers.html#/s:12LaunchDarkly29LDFlagCollectionChangeHandlera":{"name":"LDFlagCollectionChangeHandler","abstract":"<p>A closure used to notify an observer owner of a change to the feature flags in a collection of <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/LDChangedFlag.html\">LDChangedFlag</a></code>.</p>"},"Flag%20Change%20Observers.html#/s:12LaunchDarkly23LDFlagsUnchangedHandlera":{"name":"LDFlagsUnchangedHandler","abstract":"<p>A closure used to notify an observer owner that a feature flag request resulted in no changes to any feature flag.</p>"},"Classes/LDEvaluationDetail.html#/s:12LaunchDarkly18LDEvaluationDetailC5valuexvp":{"name":"value","abstract":"<p>The value of the flag for the current user.</p>","parent_name":"LDEvaluationDetail"},"Classes/LDEvaluationDetail.html#/s:12LaunchDarkly18LDEvaluationDetailC14variationIndexSiSgvp":{"name":"variationIndex","abstract":"<p>The index of the returned value within the flag&rsquo;s list of variations, or <code>nil</code> if the default was returned.</p>","parent_name":"LDEvaluationDetail"},"Classes/LDEvaluationDetail.html#/s:12LaunchDarkly18LDEvaluationDetailC6reasonSDySSypGSgvp":{"name":"reason","abstract":"<p>A structure representing the main factor that influenced the resultant flag evaluation value.</p>","parent_name":"LDEvaluationDetail"},"Structs/LDUser/CodingKeys.html#/s:12LaunchDarkly6LDUserV10CodingKeysO3keyyA2EmF":{"name":"key","abstract":"<p>Key names match the corresponding LDUser property</p>","parent_name":"CodingKeys"},"Structs/LDUser/CodingKeys.html#/s:12LaunchDarkly6LDUserV10CodingKeysO4nameyA2EmF":{"name":"name","parent_name":"CodingKeys"},"Structs/LDUser/CodingKeys.html#/s:12LaunchDarkly6LDUserV10CodingKeysO9firstNameyA2EmF":{"name":"firstName","parent_name":"CodingKeys"},"Structs/LDUser/CodingKeys.html#/s:12LaunchDarkly6LDUserV10CodingKeysO8lastNameyA2EmF":{"name":"lastName","parent_name":"CodingKeys"},"Structs/LDUser/CodingKeys.html#/s:12LaunchDarkly6LDUserV10CodingKeysO7countryyA2EmF":{"name":"country","parent_name":"CodingKeys"},"Structs/LDUser/CodingKeys.html#/s:12LaunchDarkly6LDUserV10CodingKeysO9ipAddressyA2EmF":{"name":"ipAddress","parent_name":"CodingKeys"},"Structs/LDUser/CodingKeys.html#/s:12LaunchDarkly6LDUserV10CodingKeysO5emailyA2EmF":{"name":"email","parent_name":"CodingKeys"},"Structs/LDUser/CodingKeys.html#/s:12LaunchDarkly6LDUserV10CodingKeysO6avataryA2EmF":{"name":"avatar","parent_name":"CodingKeys"},"Structs/LDUser/CodingKeys.html#/s:12LaunchDarkly6LDUserV10CodingKeysO6customyA2EmF":{"name":"custom","parent_name":"CodingKeys"},"Structs/LDUser/CodingKeys.html#/s:12LaunchDarkly6LDUserV10CodingKeysO11isAnonymousyA2EmF":{"name":"isAnonymous","parent_name":"CodingKeys"},"Structs/LDUser/CodingKeys.html#/s:12LaunchDarkly6LDUserV10CodingKeysO6deviceyA2EmF":{"name":"device","parent_name":"CodingKeys"},"Structs/LDUser/CodingKeys.html#/s:12LaunchDarkly6LDUserV10CodingKeysO15operatingSystemyA2EmF":{"name":"operatingSystem","parent_name":"CodingKeys"},"Structs/LDUser/CodingKeys.html#/s:12LaunchDarkly6LDUserV10CodingKeysO6configyA2EmF":{"name":"config","parent_name":"CodingKeys"},"Structs/LDUser/CodingKeys.html#/s:12LaunchDarkly6LDUserV10CodingKeysO17privateAttributesyA2EmF":{"name":"privateAttributes","parent_name":"CodingKeys"},"Structs/LDUser/CodingKeys.html#/s:12LaunchDarkly6LDUserV10CodingKeysO9secondaryyA2EmF":{"name":"secondary","parent_name":"CodingKeys"},"Structs/LDUser/CodingKeys.html":{"name":"CodingKeys","abstract":"<p>String keys associated with LDUser properties.</p>","parent_name":"LDUser"},"Structs/LDUser.html#/s:12LaunchDarkly6LDUserV22privatizableAttributesSaySSGvpZ":{"name":"privatizableAttributes","abstract":"<p>LDUser attributes that can be marked private.","parent_name":"LDUser"},"Structs/LDUser.html#/s:12LaunchDarkly6LDUserV3keySSvp":{"name":"key","abstract":"<p>Client app defined string that uniquely identifies the user. If the client app does not define a key, the SDK will assign an identifier associated with the anonymous user. The key cannot be made private.</p>","parent_name":"LDUser"},"Structs/LDUser.html#/s:12LaunchDarkly6LDUserV9secondarySSSgvp":{"name":"secondary","abstract":"<p>The secondary key for the user. See the <a href=\"https://docs.launchdarkly.com/home/flags/targeting-users#percentage-rollouts\">documentation</a> for more information on it&rsquo;s use for percentage rollout bucketing.</p>","parent_name":"LDUser"},"Structs/LDUser.html#/s:12LaunchDarkly6LDUserV4nameSSSgvp":{"name":"name","abstract":"<p>Client app defined name for the user. (Default: nil)</p>","parent_name":"LDUser"},"Structs/LDUser.html#/s:12LaunchDarkly6LDUserV9firstNameSSSgvp":{"name":"firstName","abstract":"<p>Client app defined first name for the user. (Default: nil)</p>","parent_name":"LDUser"},"Structs/LDUser.html#/s:12LaunchDarkly6LDUserV8lastNameSSSgvp":{"name":"lastName","abstract":"<p>Client app defined last name for the user. (Default: nil)</p>","parent_name":"LDUser"},"Structs/LDUser.html#/s:12LaunchDarkly6LDUserV7countrySSSgvp":{"name":"country","abstract":"<p>Client app defined country for the user. (Default: nil)</p>","parent_name":"LDUser"},"Structs/LDUser.html#/s:12LaunchDarkly6LDUserV9ipAddressSSSgvp":{"name":"ipAddress","abstract":"<p>Client app defined ipAddress for the user. (Default: nil)</p>","parent_name":"LDUser"},"Structs/LDUser.html#/s:12LaunchDarkly6LDUserV5emailSSSgvp":{"name":"email","abstract":"<p>Client app defined email address for the user. (Default: nil)</p>","parent_name":"LDUser"},"Structs/LDUser.html#/s:12LaunchDarkly6LDUserV6avatarSSSgvp":{"name":"avatar","abstract":"<p>Client app defined avatar for the user. (Default: nil)</p>","parent_name":"LDUser"},"Structs/LDUser.html#/s:12LaunchDarkly6LDUserV6customSDySSypGSgvp":{"name":"custom","abstract":"<p>Client app defined dictionary for the user. The client app may declare top level dictionary items as private. If the client app defines custom as private, the SDK considers the dictionary private except for device &amp; operatingSystem (which cannot be made private). See <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/LDUser.html#/s:12LaunchDarkly6LDUserV17privateAttributesSaySSGSgvp\">privateAttributes</a></code> for details. (Default: nil)</p>","parent_name":"LDUser"},"Structs/LDUser.html#/s:12LaunchDarkly6LDUserV11isAnonymousSbvp":{"name":"isAnonymous","abstract":"<p>Client app defined isAnonymous for the user. If the client app does not define isAnonymous, the SDK will use the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/LDUser.html#/s:12LaunchDarkly6LDUserV3keySSvp\">key</a></code> to set this attribute. isAnonymous cannot be made private. (Default: true)</p>","parent_name":"LDUser"},"Structs/LDUser.html#/s:12LaunchDarkly6LDUserV6deviceSSSgvp":{"name":"device","abstract":"<p>Client app defined device for the user. The SDK will determine the device automatically, however the client app can override the value. The SDK will insert the device into the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/LDUser.html#/s:12LaunchDarkly6LDUserV6customSDySSypGSgvp\">custom</a></code> dictionary. The device cannot be made private. (Default: the system identified device)</p>","parent_name":"LDUser"},"Structs/LDUser.html#/s:12LaunchDarkly6LDUserV15operatingSystemSSSgvp":{"name":"operatingSystem","abstract":"<p>Client app defined operatingSystem for the user. The SDK will determine the operatingSystem automatically, however the client app can override the value. The SDK will insert the operatingSystem into the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/LDUser.html#/s:12LaunchDarkly6LDUserV6customSDySSypGSgvp\">custom</a></code> dictionary. The operatingSystem cannot be made private. (Default: the system identified operating system)</p>","parent_name":"LDUser"},"Structs/LDUser.html#/s:12LaunchDarkly6LDUserV17privateAttributesSaySSGSgvp":{"name":"privateAttributes","abstract":"<p>Client app defined privateAttributes for the user.","parent_name":"LDUser"},"Structs/LDUser.html#/s:12LaunchDarkly6LDUserV10objcLdUserAA04ObjcC0Cvp":{"name":"objcLdUser","abstract":"<p>An NSObject wrapper for the Swift LDUser struct. Intended for use in mixed apps when Swift code needs to pass a user into an Objective-C method.</p>","parent_name":"LDUser"},"Structs/LDUser.html#/s:12LaunchDarkly6LDUserV3key4name9firstName04lastG07country9ipAddress5email6avatar6custom11isAnonymous6device15operatingSystem17privateAttributes9secondaryACSSSg_A7RSDySSypGSgSbSgA2RSaySSGSgARtcfc":{"name":"init(key:name:firstName:lastName:country:ipAddress:email:avatar:custom:isAnonymous:device:operatingSystem:privateAttributes:secondary:)","abstract":"<p>Initializer to create a LDUser. Client configurable attributes each have an optional parameter to facilitate setting user information into the LDUser. The SDK will automatically set <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/LDUser.html#/s:12LaunchDarkly6LDUserV3keySSvp\">key</a></code>, <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/LDUser.html#/s:12LaunchDarkly6LDUserV6deviceSSSgvp\">device</a></code>, <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/LDUser.html#/s:12LaunchDarkly6LDUserV15operatingSystemSSSgvp\">operatingSystem</a></code>, and <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/LDUser.html#/s:12LaunchDarkly6LDUserV11isAnonymousSbvp\">isAnonymous</a></code> attributes if the client does not provide them. The SDK embeds <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/LDUser.html#/s:12LaunchDarkly6LDUserV6deviceSSSgvp\">device</a></code> and <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/LDUser.html#/s:12LaunchDarkly6LDUserV15operatingSystemSSSgvp\">operatingSystem</a></code> into the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/LDUser.html#/s:12LaunchDarkly6LDUserV6customSDySSypGSgvp\">custom</a></code> dictionary for transmission to LaunchDarkly.</p>","parent_name":"LDUser"},"Structs/LDUser.html#/s:12LaunchDarkly6LDUserV14userDictionaryACSDySSypG_tcfc":{"name":"init(userDictionary:)","abstract":"<p>Initializer that takes a [String: Any] and creates a LDUser from the contents. Uses any keys present to define corresponding attribute values. Initializes attributes not present in the dictionary to their default value. Attempts to set <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/LDUser.html#/s:12LaunchDarkly6LDUserV6deviceSSSgvp\">device</a></code> and <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/LDUser.html#/s:12LaunchDarkly6LDUserV15operatingSystemSSSgvp\">operatingSystem</a></code> from corresponding values embedded in <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/LDUser.html#/s:12LaunchDarkly6LDUserV6customSDySSypGSgvp\">custom</a></code>. DEPRECATED: Attempts to set feature flags from values set in <code>config</code>.</p>","parent_name":"LDUser"},"Structs/LDUser.html#/s:12LaunchDarkly6LDUserV2eeoiySbAC_ACtFZ":{"name":"==(_:_:)","abstract":"<p>Compares users by comparing their user keys only, to allow the client app to collect user information over time</p>","parent_name":"LDUser"},"Structs/LDConfig/Minima.html#/s:12LaunchDarkly8LDConfigV6MinimaV19flagPollingIntervalSdvp":{"name":"flagPollingInterval","abstract":"<p>The minimum time interval between feature flag requests. Used only for polling mode. (5 minutes)</p>","parent_name":"Minima"},"Structs/LDConfig/Minima.html#/s:12LaunchDarkly8LDConfigV6MinimaV29backgroundFlagPollingIntervalSdvp":{"name":"backgroundFlagPollingInterval","abstract":"<p>The minimum time interval between feature flag requests while running in the background. Used only for polling mode. (15 minutes)</p>","parent_name":"Minima"},"Structs/LDConfig/Minima.html#/s:12LaunchDarkly8LDConfigV6MinimaV27diagnosticRecordingIntervalSdvp":{"name":"diagnosticRecordingInterval","abstract":"<p>The minimum time interval between sending periodic diagnostic data. (5 minutes)</p>","parent_name":"Minima"},"Structs/LDConfig/Constants.html#/s:12LaunchDarkly8LDConfigV9ConstantsV22primaryEnvironmentNameSSvpZ":{"name":"primaryEnvironmentName","abstract":"<p>The default environment name that must be present in a single or multiple environment configuration</p>","parent_name":"Constants"},"Structs/LDConfig/Constants.html":{"name":"Constants","abstract":"<p>Constants relevant to setting up an <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/LDConfig.html\">LDConfig</a></code></p>","parent_name":"LDConfig"},"Structs/LDConfig/Minima.html":{"name":"Minima","abstract":"<p>The minimum values allowed to be set into LDConfig.</p>","parent_name":"LDConfig"},"Structs/LDConfig.html#/s:12LaunchDarkly8LDConfigV9mobileKeySSvp":{"name":"mobileKey","abstract":"<p>The Mobile key from your <a href=\"app.launchdarkly.com\">LaunchDarkly Account</a> settings (on the left at the bottom). If you have multiple projects be sure to choose the correct Mobile key.</p>","parent_name":"LDConfig"},"Structs/LDConfig.html#/s:12LaunchDarkly8LDConfigV7baseUrl10Foundation3URLVvp":{"name":"baseUrl","abstract":"<p>The url for making feature flag requests. Do not change unless instructed by LaunchDarkly.</p>","parent_name":"LDConfig"},"Structs/LDConfig.html#/s:12LaunchDarkly8LDConfigV9eventsUrl10Foundation3URLVvp":{"name":"eventsUrl","abstract":"<p>The url for making event reports. Do not change unless instructed by LaunchDarkly.</p>","parent_name":"LDConfig"},"Structs/LDConfig.html#/s:12LaunchDarkly8LDConfigV9streamUrl10Foundation3URLVvp":{"name":"streamUrl","abstract":"<p>The url for connecting to the <em>clientstream</em>. Do not change unless instructed by LaunchDarkly.</p>","parent_name":"LDConfig"},"Structs/LDConfig.html#/s:12LaunchDarkly8LDConfigV13eventCapacitySivp":{"name":"eventCapacity","abstract":"<p>The maximum number of analytics events the LDClient can store. When the LDClient event store reaches the eventCapacity, the SDK discards events until it successfully reports them to LaunchDarkly. (Default: 100)</p>","parent_name":"LDConfig"},"Structs/LDConfig.html#/s:12LaunchDarkly8LDConfigV17connectionTimeoutSdvp":{"name":"connectionTimeout","abstract":"<p>The timeout interval for flag requests and event reports. (Default: 10 seconds)</p>","parent_name":"LDConfig"},"Structs/LDConfig.html#/s:12LaunchDarkly8LDConfigV18eventFlushIntervalSdvp":{"name":"eventFlushInterval","abstract":"<p>The time interval between event reports (Default: 30 seconds)</p>","parent_name":"LDConfig"},"Structs/LDConfig.html#/s:12LaunchDarkly8LDConfigV19flagPollingIntervalSdvp":{"name":"flagPollingInterval","abstract":"<p>The time interval between feature flag requests. Used only for polling mode. (Default: 5 minutes)</p>","parent_name":"LDConfig"},"Structs/LDConfig.html#/s:12LaunchDarkly8LDConfigV29backgroundFlagPollingIntervalSdvp":{"name":"backgroundFlagPollingInterval","abstract":"<p>The time interval between feature flag requests while running in the background. Used only for polling mode. (Default: 60 minutes)</p>","parent_name":"LDConfig"},"Structs/LDConfig.html#/s:12LaunchDarkly8LDConfigV13streamingModeAA011LDStreamingE0Ovp":{"name":"streamingMode","abstract":"<p>Controls the method the SDK uses to keep feature flags updated. When set to .streaming, connects to <code>clientstream</code> which notifies the SDK of feature flag changes. When set to .polling, an efficient polling mechanism is used to periodically request feature flag values. Ignored for watchOS, which always uses .polling. See <code><a href=\"36f8f5912051ae747ef441d6511ca4cbEnums/LDStreamingMode.html\">LDStreamingMode</a></code> for more details. (Default: .streaming)</p>","parent_name":"LDConfig"},"Structs/LDConfig.html#/s:12LaunchDarkly8LDConfigV23enableBackgroundUpdatesSbvp":{"name":"enableBackgroundUpdates","abstract":"<p>Enables feature flag updates when your app is in the background. Allowed on macOS only. (Default: false)</p>","parent_name":"LDConfig"},"Structs/LDConfig.html#/s:12LaunchDarkly8LDConfigV11startOnlineSbvp":{"name":"startOnline","abstract":"<p>Controls LDClient start behavior. When true, calling start causes LDClient to go online. When false, calling start causes LDClient to remain offline. If offline at start, set the client online to receive flag updates. (Default: true)</p>","parent_name":"LDConfig"},"Structs/LDConfig.html#/s:12LaunchDarkly8LDConfigV24allUserAttributesPrivateSbvp":{"name":"allUserAttributesPrivate","abstract":"<p>Treat all user attributes as private for event reporting for all users.</p>","parent_name":"LDConfig"},"Structs/LDConfig.html#/s:12LaunchDarkly8LDConfigV21privateUserAttributesSaySSGSgvp":{"name":"privateUserAttributes","abstract":"<p>User attributes and top level custom dictionary keys to treat as private for event reporting for all users.</p>","parent_name":"LDConfig"},"Structs/LDConfig.html#/s:12LaunchDarkly8LDConfigV9useReportSbvp":{"name":"useReport","abstract":"<p>Directs the SDK to use REPORT for HTTP requests to connect to <code>clientstream</code> and make feature flag requests. When false the SDK uses GET for these requests. Do not use unless advised by LaunchDarkly. (Default: false)</p>","parent_name":"LDConfig"},"Structs/LDConfig.html#/s:12LaunchDarkly8LDConfigV18inlineUserInEventsSbvp":{"name":"inlineUserInEvents","abstract":"<p>Controls how the SDK reports the user in analytics event reports. When set to true, event reports will contain the user attributes, except attributes marked as private. When set to false, event reports will contain the user&rsquo;s key only, reducing the size of event reports. (Default: false)</p>","parent_name":"LDConfig"},"Structs/LDConfig.html#/s:12LaunchDarkly8LDConfigV11isDebugModeSbvp":{"name":"isDebugMode","abstract":"<p>Enables logging for debugging. (Default: false)</p>","parent_name":"LDConfig"},"Structs/LDConfig.html#/s:12LaunchDarkly8LDConfigV17evaluationReasonsSbvp":{"name":"evaluationReasons","abstract":"<p>Enables requesting evaluation reasons for all flags. (Default: false)</p>","parent_name":"LDConfig"},"Structs/LDConfig.html#/s:12LaunchDarkly8LDConfigV14maxCachedUsersSivp":{"name":"maxCachedUsers","abstract":"<p>An Integer that tells UserEnvironmentFlagCache the maximum number of users to locally cache. Can be set to -1 for unlimited cached users.</p>","parent_name":"LDConfig"},"Structs/LDConfig.html#/s:12LaunchDarkly8LDConfigV16diagnosticOptOutSbvp":{"name":"diagnosticOptOut","abstract":"<p>Set to true to opt out of sending diagnostic data. (Default: false)</p>","parent_name":"LDConfig"},"Structs/LDConfig.html#/s:12LaunchDarkly8LDConfigV27diagnosticRecordingIntervalSdvp":{"name":"diagnosticRecordingInterval","abstract":"<p>The interval between sending periodic diagnostic data. (Default: 15 minutes)</p>","parent_name":"LDConfig"},"Structs/LDConfig.html#/s:12LaunchDarkly8LDConfigV11wrapperNameSSSgvp":{"name":"wrapperName","abstract":"<p>For use by wrapper libraries to set an identifying name for the wrapper being used. This will be sent in the &ldquo;X-LaunchDarkly-Wrapper&rdquo; header on requests to the LaunchDarkly servers to allow recording metrics on the usage of wrapper libraries. (Default: nil)</p>","parent_name":"LDConfig"},"Structs/LDConfig.html#/s:12LaunchDarkly8LDConfigV14wrapperVersionSSSgvp":{"name":"wrapperVersion","abstract":"<p>For use by wrapper libraries to report the version of the library in use. If the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/LDConfig.html#/s:12LaunchDarkly8LDConfigV11wrapperNameSSSgvp\">wrapperName</a></code> has not been set this field will be ignored. Otherwise the version string will be included with the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/LDConfig.html#/s:12LaunchDarkly8LDConfigV11wrapperNameSSSgvp\">wrapperName</a></code> in the &ldquo;X-LaunchDarkly-Wrapper&rdquo; header on requests to the LaunchDarkly servers. (Default: nil)</p>","parent_name":"LDConfig"},"Structs/LDConfig.html#/s:12LaunchDarkly8LDConfigV17additionalHeadersSDyS2SGvp":{"name":"additionalHeaders","abstract":"<p>Additional headers that should be added to all HTTP requests from SDK components to LaunchDarkly services</p>","parent_name":"LDConfig"},"Structs/LDConfig.html#/s:12LaunchDarkly8LDConfigV14headerDelegateSDyS2SG10Foundation3URLV_AEtcSgvp":{"name":"headerDelegate","abstract":"<p>a closure to allow dynamic changes of headers on connect &amp; reconnect</p>","parent_name":"LDConfig"},"Structs/LDConfig.html#/s:12LaunchDarkly8LDConfigV6minimaAC6MinimaVvp":{"name":"minima","abstract":"<p>LaunchDarkly defined minima for selected configurable items</p>","parent_name":"LDConfig"},"Structs/LDConfig.html#/s:12LaunchDarkly8LDConfigV12objcLdConfigAA04ObjcC0Cvp":{"name":"objcLdConfig","abstract":"<p>An NSObject wrapper for the Swift LDConfig struct. Intended for use in mixed apps when Swift code needs to pass a config into an Objective-C method.</p>","parent_name":"LDConfig"},"Structs/LDConfig.html#/s:12LaunchDarkly8LDConfigV18autoAliasingOptOutSbvp":{"name":"autoAliasingOptOut","abstract":"<p>should anonymous users automatically be aliased when identifying</p>","parent_name":"LDConfig"},"Structs/LDConfig.html#/s:12LaunchDarkly8LDConfigV22setSecondaryMobileKeysyySDyS2SGKF":{"name":"setSecondaryMobileKeys(_:)","abstract":"<p>Sets a Dictionary of identifying names to unique mobile keys to access secondary environments in the LDConfig. Throws <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/LDInvalidArgumentError.html\">LDInvalidArgumentError</a></code> if you try to add duplicate keys or put the primary key or name in secondaryMobileKeys.</p>","parent_name":"LDConfig"},"Structs/LDConfig.html#/s:12LaunchDarkly8LDConfigV22getSecondaryMobileKeysSDyS2SGyF":{"name":"getSecondaryMobileKeys()","abstract":"<p>Returns a Dictionary of identifying names to unique mobile keys to access secondary environments.</p>","parent_name":"LDConfig"},"Structs/LDConfig.html#/s:12LaunchDarkly8LDConfigV9mobileKeyACSS_tcfc":{"name":"init(mobileKey:)","abstract":"<p>LDConfig constructor. Configurable values are all set to their default values. The client app can modify these values as desired. Note that client app developers may prefer to get the LDConfig from <code>LDClient.config</code> in order to retain previously set values.</p>","parent_name":"LDConfig"},"Structs/LDConfig.html#/s:12LaunchDarkly8LDConfigV2eeoiySbAC_ACtFZ":{"name":"==(_:_:)","abstract":"<p>Compares the settable properties in 2 LDConfig structs</p>","parent_name":"LDConfig"},"Classes/LDClient.html#/s:12LaunchDarkly8LDClientC8isOnlineSbvp":{"name":"isOnline","abstract":"<p>Reports the online/offline state of the LDClient.</p>","parent_name":"LDClient"},"Classes/LDClient.html#/s:12LaunchDarkly8LDClientC13isInitializedSbvp":{"name":"isInitialized","abstract":"<p>Reports the initialization state of the LDClient.</p>","parent_name":"LDClient"},"Classes/LDClient.html#/s:12LaunchDarkly8LDClientC9setOnline_10completionySb_yycSgtF":{"name":"setOnline(_:completion:)","abstract":"<p>Set the LDClient online/offline.</p>","parent_name":"LDClient"},"Classes/LDClient.html#/s:12LaunchDarkly8LDClientC24getConnectionInformationAA0eF0VyF":{"name":"getConnectionInformation()","abstract":"<p>Returns an object containing information about successful and/or failed polling or streaming connections to LaunchDarkly</p>","parent_name":"LDClient"},"Classes/LDClient.html#/s:12LaunchDarkly8LDClientC5closeyyF":{"name":"close()","abstract":"<p>Stops the LDClient. Stopping the client means the LDClient goes offline and stops recording events. LDClient will no longer provide feature flag values, only returning default values.</p>","parent_name":"LDClient"},"Classes/LDClient.html#/s:12LaunchDarkly8LDClientC8identify4user10completionyAA6LDUserV_yycSgtF":{"name":"identify(user:completion:)","abstract":"<p>The LDUser set into the LDClient may affect the set of feature flags returned by the LaunchDarkly server, and ties event tracking to the user. See <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/LDUser.html\">LDUser</a></code> for details about what information can be retained.</p>","parent_name":"LDClient"},"Classes/LDClient.html#/s:12LaunchDarkly8LDClientC9variation6forKey12defaultValuexSS_xtAA06LDFlagH11ConvertibleRzlF":{"name":"variation(forKey:defaultValue:)","abstract":"<p>Returns the variation for the given feature flag. If the flag does not exist, cannot be cast to the correct return type, or the LDClient is not started, returns the default value. Use this method when the default value is a non-Optional type. See <code>variation</code> with the Optional return value when the default value can be nil.</p>","parent_name":"LDClient"},"Classes/LDClient.html#/s:12LaunchDarkly8LDClientC15variationDetail6forKey12defaultValueAA012LDEvaluationE0CyxGSS_xtAA06LDFlagI11ConvertibleRzlF":{"name":"variationDetail(forKey:defaultValue:)","abstract":"<p>Returns the LDEvaluationDetail for the given feature flag. LDEvaluationDetail gives you more insight into why your variation contains the specified value. If the flag does not exist, cannot be cast to the correct return type, or the LDClient is not started, returns an LDEvaluationDetail with the default value. Use this method when the default value is a non-Optional type. See <code>variationDetail</code> with the Optional return value when the default value can be nil. See <a href=\"x-source-tag://variationWithdefaultValue\">variationWithdefaultValue</a></p>","parent_name":"LDClient"},"Classes/LDClient.html#/s:12LaunchDarkly8LDClientC9variation6forKey12defaultValuexSgSS_AGtAA06LDFlagH11ConvertibleRzlF":{"name":"variation(forKey:defaultValue:)","abstract":"<p>Returns the variation for the given feature flag. If the flag does not exist, cannot be cast to the correct return type, or the LDClient is not started, returns the default value, which may be <code>nil</code>. Use this method when the default value is an Optional type. See <code>variation</code> with the non-Optional return value when the default value cannot be nil.</p>","parent_name":"LDClient"},"Classes/LDClient.html#/s:12LaunchDarkly8LDClientC15variationDetail6forKey12defaultValueAA012LDEvaluationE0CyxSgGSS_AItAA06LDFlagI11ConvertibleRzlF":{"name":"variationDetail(forKey:defaultValue:)","abstract":"<p>Returns the LDEvaluationDetail for the given feature flag. LDEvaluationDetail gives you more insight into why your variation contains the specified value. If the flag does not exist, cannot be cast to the correct return type, or the LDClient is not started, returns an LDEvaluationDetail with the default value, which may be <code>nil</code>. Use this method when the default value is a Optional type. See <a href=\"x-source-tag://variationWithoutdefaultValue\">variationWithoutdefaultValue</a></p>","parent_name":"LDClient"},"Classes/LDClient.html#/s:12LaunchDarkly8LDClientC8allFlagsSDySSypGSgvp":{"name":"allFlags","abstract":"<p>Returns a dictionary with the flag keys and their values. If the LDClient is not started, returns nil.</p>","parent_name":"LDClient"},"Classes/LDClient.html#/s:12LaunchDarkly8LDClientC7observe3key5owner7handlerySS_yXlyAA13LDChangedFlagVctF":{"name":"observe(key:owner:handler:)","abstract":"<p>Sets a handler for the specified flag key executed on the specified owner. If the flag&rsquo;s value changes, executes the handler, passing in the <code>changedFlag</code> containing the old and new flag values. See <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/LDChangedFlag.html\">LDChangedFlag</a></code> for details.</p>","parent_name":"LDClient"},"Classes/LDClient.html#/s:12LaunchDarkly8LDClientC7observe4keys5owner7handlerySaySSG_yXlySDySSAA13LDChangedFlagVGctF":{"name":"observe(keys:owner:handler:)","abstract":"<p>Sets a handler for the specified flag keys executed on the specified owner. If any observed flag&rsquo;s value changes, executes the handler 1 time, passing in a dictionary of [LDFlagKey: LDChangedFlag] containing the old and new flag values. See <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/LDChangedFlag.html\">LDChangedFlag</a></code> for details.</p>","parent_name":"LDClient"},"Classes/LDClient.html#/s:12LaunchDarkly8LDClientC10observeAll5owner7handleryyXl_ySDySSAA13LDChangedFlagVGctF":{"name":"observeAll(owner:handler:)","abstract":"<p>Sets a handler for all flag keys executed on the specified owner. If any flag&rsquo;s value changes, executes the handler 1 time, passing in a dictionary of [LDFlagKey: LDChangedFlag] containing the old and new flag values. See <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/LDChangedFlag.html\">LDChangedFlag</a></code> for details.</p>","parent_name":"LDClient"},"Classes/LDClient.html#/s:12LaunchDarkly8LDClientC21observeFlagsUnchanged5owner7handleryyXl_yyctF":{"name":"observeFlagsUnchanged(owner:handler:)","abstract":"<p>Sets a handler executed when a flag update leaves the flags unchanged from their previous values.</p>","parent_name":"LDClient"},"Classes/LDClient.html#/s:12LaunchDarkly8LDClientC28observeCurrentConnectionMode5owner7handleryyXl_yAA0F11InformationV0fG0OctF":{"name":"observeCurrentConnectionMode(owner:handler:)","abstract":"<p>Sets a handler executed when ConnectionInformation.currentConnectionMode changes.</p>","parent_name":"LDClient"},"Classes/LDClient.html#/s:12LaunchDarkly8LDClientC13stopObserving5owneryyXl_tF":{"name":"stopObserving(owner:)","abstract":"<p>Removes all observers for the given owner, including the flagsUnchangedObserver</p>","parent_name":"LDClient"},"Classes/LDClient.html#/s:12LaunchDarkly8LDClientC12observeError5owner7handleryyXl_ys0E0_pctF":{"name":"observeError(owner:handler:)","abstract":"<p>Undocumented</p>","parent_name":"LDClient"},"Classes/LDClient.html#/s:12LaunchDarkly8LDClientC5track3key4data11metricValueySS_ypSgSdSgtKF":{"name":"track(key:data:metricValue:)","abstract":"<p>Adds a custom event to the LDClient event store. A client app can set a tracking event to allow client customized data analysis. Once an app has called <code>track</code>, the app cannot remove the event from the event store.</p>","parent_name":"LDClient"},"Classes/LDClient.html#/s:12LaunchDarkly8LDClientC5alias7context15previousContextyAA6LDUserV_AHtF":{"name":"alias(context:previousContext:)","abstract":"<p>Tells the SDK to generate an alias event.</p>","parent_name":"LDClient"},"Classes/LDClient.html#/s:12LaunchDarkly8LDClientC5flushyyF":{"name":"flush()","abstract":"<p>Tells the SDK to immediately send any currently queued events to LaunchDarkly.</p>","parent_name":"LDClient"},"Classes/LDClient.html#/s:12LaunchDarkly8LDClientC5start6config4user10completionyAA8LDConfigV_AA6LDUserVSgyycSgtFZ":{"name":"start(config:user:completion:)","abstract":"<p>Starts the LDClient using the passed in <code>config</code> &amp; <code>user</code>. Call this before requesting feature flag values. The LDClient will not go online until you call this method.","parent_name":"LDClient"},"Classes/LDClient.html#/s:12LaunchDarkly8LDClientC5start6config4user0D11WaitSeconds10completionyAA8LDConfigV_AA6LDUserVSgSdySbcSgtFZ":{"name":"start(config:user:startWaitSeconds:completion:)","abstract":"<p>See <a href=\"x-source-tag://start\">start</a> for more information on starting the SDK.</p>","parent_name":"LDClient"},"Classes/LDClient.html#/s:12LaunchDarkly8LDClientC3get11environmentACSgSS_tFZ":{"name":"get(environment:)","abstract":"<p>Returns the LDClient instance for a given environment.</p>","parent_name":"LDClient"},"Classes/LDClient.html":{"name":"LDClient","abstract":"<p>The LDClient is the heart of the SDK, providing client apps running iOS, watchOS, macOS, or tvOS access to LaunchDarkly services. This singleton provides the ability to set a configuration (LDConfig) that controls how the LDClient talks to LaunchDarkly servers, and a user (LDUser) that provides finer control on the feature flag values delivered to LDClient. Once the LDClient has started, it connects to LaunchDarkly&rsquo;s servers to get the feature flag values you set in the Dashboard.</p>"},"Structs/LDConfig.html":{"name":"LDConfig","abstract":"<p>Use LDConfig to configure the LDClient. When initialized, a LDConfig contains the default values which can be changed as needed.</p>"},"Structs/LDUser.html":{"name":"LDUser","abstract":"<p>LDUser allows clients to collect information about users in order to refine the feature flag values sent to the SDK. For example, the client app may launch with the SDK defined anonymous user. As the user works with the client app, information may be collected as needed and sent to LaunchDarkly. The client app controls the information collected, which LaunchDarkly does not use except as the client directs to refine feature flags. Client apps should follow <a href=\"apple.com/legal/privacy\">Apple&rsquo;s Privacy Policy</a> when collecting user information."},"Classes/LDEvaluationDetail.html":{"name":"LDEvaluationDetail","abstract":"<p>An object returned by the SDK&rsquo;s <code>variationDetail</code> methods, combining the result of a flag evaluation with an"},"Core%20Classes.html":{"name":"Core Classes"},"Flag%20Change%20Observers.html":{"name":"Flag Change Observers"},"Connection%20Information.html":{"name":"Connection Information"},"Other%20Types.html":{"name":"Other Types"},"Objective-C%20Core%20Interfaces.html":{"name":"Objective-C Core Interfaces"},"Objective-C%20EvaluationDetail%20Wrappers.html":{"name":"Objective-C EvaluationDetail Wrappers"},"Objective-C%20ChangedFlag%20Wrappers.html":{"name":"Objective-C ChangedFlag Wrappers"},"Other%20Guides.html":{"name":"Other Guides","abstract":"<p>The following guides are available globally.</p>"},"Other%20Typealiases.html":{"name":"Other Type Aliases","abstract":"<p>The following type aliases are available globally.</p>"}}